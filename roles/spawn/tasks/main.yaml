- name: create VPC
  amazon.aws.ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr }}"
    state: present
  register: vpc
- name: associate subnet to the VPC
  ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ subnet_cidr }}"
    map_public: yes
    az: "{{ az }}"
    resource_tags:
      Name: "{{ subnet_name }}"
  register: subnet
- name: create the IGW
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    state: "present"
    tags:
      Name: "{{ igw_name }}"
  register: igw

- debug: var=igw
- name: Set a default route that go through the IGW
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    tags:
      Name: Public
    subnets:
      - "{{ subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
- name: Create the security group
  amazon.aws.ec2_group:
    name: "{{ sg_name }}"
    description: SSH only secgroup
    vpc_id: "{{ vpc.vpc.id }}"
    rules:
      - proto: tcp
        ports:
        - 22
        cidr_ip: 0.0.0.0/0
        rule_desc: allow all on port 22
# TODO: This should not be necessary
-  amazon.aws.ec2_key:
    name:  "{{ keypair_name }}"
    state: absent
- name: Create the keypair
  amazon.aws.ec2_key:
    name:  "{{ keypair_name }}"
    key_material: "{{ lookup('file', my_ssh_pub_key) }}"
- name: start an instance with a public IP address
  amazon.aws.ec2_instance:
    name: "{{ instance_name }}"
    key_name: "{{ keypair_name }}"
    instance_type: g4dn.2xlarge
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    security_group: "{{ sg_name }}"
    network:
      assign_public_ip: true
    image_id: "{{ image_ami }}"
    tags:
      Environment: Testing
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: 32
          delete_on_termination: true
    wait: true
    state: running

- name: Collect information about the instance
  amazon.aws.ec2_instance_info:
    filters:
      tag:Name: "{{ instance_name }}"
      instance-state-name: ["running"]
  register: instance_info
- debug: var=instance_info.instances[0].public_ip_address

- name: A the gpu host
  ansible.builtin.add_host:
    hostname: gpu
    ansible_host: '{{ instance_info.instances[0].public_ip_address }}'
    ansible_user: ec2-user
    ansible_host_key_checking: false
    ansible_ssh_private_key_file: "{{ my_ssh_pub_key }}"
